name: Petpal CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
        ports: ["3306:3306"]
        options: >-
          --health-cmd="mysqladmin ping -h localhost -proot"
          --health-interval=10s
          --health-retries=3
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with: { node-version: 18 }
      - run: npm install --no-bin-links
      - run: chmod +x ./node_modules/.bin/jest
      - name: Esperar MySQL
        run: |
          for i in {1..10}; do
            mysqladmin ping -h127.0.0.1 -uroot -proot && break
            sleep 3
          done
      - name: Crear .env
        run: |
          cat > .env <<EOF
          DB_HOST=127.0.0.1
          DB_USER=root
          DB_PASSWORD=root
          DB_DATABASE=testdb
          DB_PORT=3306
          JWT_SECRET=testing-secret
          EOF
      - run: mysql -h127.0.0.1 -uroot -proot testdb < scripts/seed-ci.sql
      - run: npm run test:unit
      - run: npm run coverage
      - run: npm run test:integration

  deploy-qa:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Desplegar en Railway (QA / Pre-producción)
        run: |
          RAILWAY_TOKEN=${{ secrets.RAILWAY_TOKEN }} \
          RAILWAY_PROJECT=${{ secrets.RAILWAY_PROJECT_ID }} \
          npx @railway/cli@latest up . --service petpal-backend --environment production --detach # Asumiendo que 'production' es tu entorno de QA, ajusta si es 'staging' o 'development'

  deploy-prod:
    needs: build-and-test # Cambiado de 'ready-for-qa-approval' a 'build-and-test' para simplificar, si el de QA no es un gating real.
                         # Si 'ready-for-qa-approval' es un job aparte, ajusta esto.
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://petpal-backend-production.up.railway.app
    permissions:
      issues: write
    steps:
      - uses: actions/checkout@v3
      - name: Esperar aprobación manual para despliegue a PRODUCCIÓN
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: nicolasbergami,santiaguero7
          minimum-approvals: 1
          issue-title: "Aprobación manual requerida para deploy a producción"

      # --- PASO DE DEPURACIÓN (Mantener hasta que todo funcione bien) ---
      - name: Ejecutar comandos de depuración
        run: |
          echo "--- Debug: Listar archivos en el directorio actual ---"
          ls -la
          pwd
          echo ""

          echo "--- Debug: Contenido de railway.json ---"
          cat railway.json || echo "railway.json no encontrado o error de lectura"
          echo ""

          echo "--- Debug: Verificar variables de entorno de Railway (antes de pasarlas directamente) ---"
          echo "Debug: RAILWAY_TOKEN raw access: ${{ secrets.RAILWAY_TOKEN }}"
          echo "Debug: RAILWAY_PROJECT_ID raw access: ${{ secrets.RAILWAY_PROJECT_ID }}"
          echo ""
      # --- FIN DE PASO DE DEPURACIÓN ---

      - name: Desplegar Backend en Railway (PRODUCCIÓN)
        run: |
          RAILWAY_TOKEN=${{ secrets.RAILWAY_TOKEN }} \
          RAILWAY_PROJECT=${{ secrets.RAILWAY_PROJECT_ID }} \
          npx @railway/cli@latest up . --service petpal-backend --environment production --detach

      - name: Instalar cliente MySQL
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client # Necesario para el comando 'mysql'

      - name: Ejecutar Script de Base de Datos (ej. Migraciones/Seeding)
        run: |
          # Asegúrate de que 'scripts/seed-ci.sql' contiene las migraciones o el seeding que quieres aplicar en PROD.
          # Si tienes un script de migraciones diferente para producción, ajusta la ruta.
          mysql -h ${{ secrets.DB_HOST }} \
                -P ${{ secrets.DB_PORT }} \
                -u ${{ secrets.DB_USER }} \
                -p"${{ secrets.DB_PASSWORD }}" \
                ${{ secrets.DB_NAME }} < scripts/seed-ci.sql
        env: # Asegura que estas variables también estén disponibles para el script si lo usas con Node.js
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DATABASE: ${{ secrets.DB_NAME }}