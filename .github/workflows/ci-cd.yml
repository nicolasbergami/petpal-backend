name: Petpal CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
          - main

jobs:
  build-and-test-local:
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
        ports: ["3306:3306"]
        options: >-
          --health-cmd="mysql -uroot -proot -e 'SELECT 1'" --health-interval=10s --health-retries=15 --health-timeout=5s --start-period=30s # <--- CAMBIOS AQUI
        volumes:
          - ./scripts/init-testdb.sql:/docker-entrypoint-initdb.d/init.sql
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install --no-bin-links

      - name: Make Jest executable
        run: chmod +x ./node_modules/.bin/jest

      - name: Wait for MySQL
        run: |
          echo "Waiting for MySQL with testuser..."
          # Este paso de espera manual puede ser útil si el healthcheck de Docker es demasiado estricto.
          # Aún así, lo haremos con el usuario testuser, ya que init-testdb.sql ya se ejecutó.
          for i in {1..30}; do # Aumentamos el loop a 30 (60 segundos máximo)
            mysqladmin ping -h127.0.0.1 -utestuser -ptestpassword && break
            echo "MySQL not ready yet (testuser), waiting..."
            sleep 2
          done
          mysqladmin ping -h127.0.0.1 -utestuser -ptestpassword || { echo "MySQL failed to become ready for testuser after manual wait"; exit 1; }

      - name: Create .env for local tests
        run: |
          cat > .env <<EOF
          DB_HOST=127.0.0.1
          DB_USER=testuser
          DB_PASSWORD=testpassword
          DB_DATABASE=testdb
          DB_PORT=3306
          JWT_SECRET=testing-secret
          EOF

      - name: Load database schema for tests
        run: mysql -h127.0.0.1 -utestuser -ptestpassword testdb < ./scripts/schema-ci-testdb.sql

      - name: Run Unit Tests
        run: npm run test:unit
        continue-on-error: false

      - name: Publish Unit Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Unit Tests Report
          path: junit.xml
          reporter: jest-junit

      - name: Run Integration Tests (Local)
        run: npm run test:integration
        continue-on-error: false

      - name: Publish Local Integration Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Local Integration Tests Report
          path: junit-integration.xml
          reporter: jest-junit

    # ... (el resto del workflow para QA y PROD)

  deploy-to-qa-and-test:
    needs: build-and-test-local
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
    environment:
      name: qa
      url: https://petpal-backend-qa.up.railway.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Login to Railway
        run: railway login --token ${{ secrets.RAILWAY_TOKEN }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Deploy to QA
        run: railway up --environment qa --service petpal-backend

      - name: Get QA Deployment URL
        id: get_qa_url
        run: |
          QA_URL=$(railway status --json | jq -r '.deployments[] | select(.serviceName == "petpal-backend" and .environmentName == "qa") | .publicUrl')
          echo "QA_URL=${QA_URL}" >> "$GITHUB_OUTPUT"

      - name: Wait for QA Deployment to be ready
        run: |
          sleep 10
          curl -f -I "${{ steps.get_qa_url.outputs.QA_URL }}/health" || true

      - name: Run Remote Integration Tests on QA
        run: npm run test:integration-remote
        env:
          BASE_URL: ${{ steps.get_qa_url.outputs.QA_URL }}
          NODE_ENV: integration-remote
        continue-on-error: false

      - name: Publish Remote Integration Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Remote Integration Tests Report (QA)
          path: junit-integration-remote.xml
          reporter: jest-junit

  deploy-to-prod:
    needs: deploy-to-qa-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
      statuses: write
    environment:
      name: production
      url: https://petpal-backend-production.up.railway.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Login to Railway
        run: railway login --token ${{ secrets.RAILWAY_TOKEN }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Deploy to Production
        run: railway up --environment production --service petpal-backend